////////////////////////////////////////////////////////////////
// www.hackerrank.com/challenges/picking-numbers/problem
////////////////////////////////////////////////////////////////
// (1) 私はよく図書館に行きます。
//     Ich gehe oft in die Bibliothek.
// (2) ゆみさんはよくわたしのうちに来ます。
//     Yumi kommt oft zu mir nach Hause.
// (3) 私はたいてい六時に起きます。 
//     Ich stehe normalerweise um sechs Uhr auf. 
// (4) やましたせんせいはたいてい十一時に寝ます。
//     Prof. Yamashita geht normalerweise um elf Uhr schlafen.
// (5) 私わときどき日本のしんぶんを読みます。 
//     Ich lese manchmal japanische Zeitungen.
// (6) たけしさんはときどきあの喫茶店でコーヒーを飲みます。
//     Takeshi trinkt manchmal in jenem Café Kaffee.
// (7) メアリーさんはあまり食べません。 
//     Mary isst nicht viel.
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Result
{
    public static int pickingNumbers( List <int> a )
    {
////////_         count mapping of a's elements with sorted keys
        var c = new SortedDictionary <int, int> ();
////////_            loop over a's elements and use them as keys
        foreach( int key in a ){
////////////_               ask if the key key has been defined?
            if( c.ContainsKey( key )){
////////////////_                        increment key's counter
                ++c[ key ];
            } else {
////////////////_      in the fyorst encounter initialize to one
                c[ key ] = 1;
            }
        }
////////_                          get the keys as separate list
        var keys = new List <int> ( c.Keys );
////////_                                  initialize the output
        int maxlen = c[ keys[ 0 ]];
////////_                     loop over the keys except last one
        for( int j = 0; j < keys.Count - 1; ++j ){
////////////_        initialize len with the current key's count
            int len = c[ keys[ j ]];
////////////_                  check if next key is within range
            if( keys[ j + 1 ] - keys[ j ] == 1 ){
////////////////_                                  increment len
                len += c[ keys[ j + 1 ]];
            }
////////////_                                      update maxlen
            maxlen = Math.Max( maxlen, len );
        }
////////_                                               lets' go
        return maxlen;
    }
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution{public static void Main( string[] args ){ int n =
Convert.ToInt32(Console.ReadLine().Trim());List<int> a = Console
.ReadLine().TrimEnd().Split(' ').ToList().Select(aTemp=>Convert.
ToInt32(aTemp)).ToList(); int result = Result.pickingNumbers(a);
Console.WriteLine( result );}}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////// 
// Points:                                        1064.21 / 2200
// Rank:                                                  156160

