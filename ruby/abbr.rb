################################################################
# www.hackerrank.com/challenges/abbr/problem
################################################################
################################################################
################################################################
################################################################
OKAY = 1
NOPE = 0
################################################################
################################################################
def upcase?( s )
    s == s.upcase # works both for chars and strings
end
################################################################
################################################################
def downcase?( s )
    s == s.downcase
end
################################################################
################################################################
def len( s )
    s.length # tha'ts
end
################################################################
################################################################
def abbreviation( a, b )
    [ "NO", "YES" ][ abbr( a, b )]
end
################################################################
################################################################
def abbr( a, b )
    # ve can only delete and upperfy so to speak, not add
    return NOPE if len( a ) < len( b )
    # if b has at least one downcase letter that removes the
    # deletion, zo check that
    if upcase?( b )
        # Here b is only uppercase zo use DP for solving the
        # prob, we need it cos of this case:
        # a=bBC | b=BC, zo we can either skip or convyort
        begin#ze
            Abbr.new( a, b ).dp( 0, 0 )
        rescue
            return OKAY
        end
        return NOPE
    else 
        return NOPE if len( a ) != len( b )
        #
        len( b ).times do | j |
            if downcase?( b[ j ])
                return NOPE if b[ j ] != a[ j ]
            else
                return NOPE if b[ j ] != a[ j ].upcase
            end
        end
    end
    OKAY
end
################################################################
################################################################
################################################################
################################################################
def consa( m, n )
    Array.new( m ){ Array.new( n, false )}
end
################################################################
################################################################
class Abbr
    def initialize( a, b )
        @a = a
        @b = b
        @ch = consa( len( a ), len( b )) # check the o-o-orks 
    end

    def dp( i, j )
        if j >= len( @b )
            # check if remaining a is only lowercase
            if i >= len( @a ) || downcase?( @a[ i .. ])
                raise "Nano-Ho-o-o"
            end
        end
        return if i >= len( @a )
        return if @ch[ i ][ j ]
        if @a[ i ] == @b[ j ] ############################ A | A
            dp( i + 1, j + 1 )
        else
            if !upcase?( @a[ i ]) ######################## B | C
                dp( i + 1, j ) # skp( c | A or f | F )
                if @b[ j ] == @a[ i ].upcase ############# b | B
                    dp( i + 1, j + 1 )
                end
            end
        end
        @ch[ i ][ j ] = true
    end
end
####### ########################################################
####### ########################################################
################################################################
################################################################
q = gets.strip.to_i        #####################################
q.times do |q_itr|         #####################################
    a = gets.chomp         #####################################
    b = gets.chomp         #####################################
    puts abbreviation a, b #####################################
end                        #####################################
################################################################
################################################################
################################################################
################################################################
# (1) 映画を見ませんか。
#     Möchten Sie einen Film sehen?
################################################################
# (2) 私のうちに来ませんか。
#     Möchten Sie zu mir nach Hause kommen?
################################################################
# (3) テニスをしませんか。
#     Möchten Sie Tennis spielen?
################################################################
# (4) 晩ご飯をたべませんか。 
#     Möchten Sie zu Abend essen?
################################################################
# (5) 図書館で勉強しませんか。  
#     Möchten Sie in der Bibliothek lernen?
###### #########################################################
###### #########################################################
################################################################
################################################################
# (6) 喫茶店で話しませんか。
#     Möchten Sie im Café sprechen?
################################################################
################################################################
# (7) お茶をうちで飲みませんか。 
#     Möchten Sie bei mir zu Hause Tee trinken? 
################################################################
# (8) 音楽を聞きませんか。
#     Möchten Sie Musik hören?
################################################################
#                                                Congratulations
#                                      You solved this challenge
# Points:                                           815.75 / 850
# Rank:                                                   254749
