################################################################
# hackerrank.com/challenges/maximum-palindromes/
################################################################
# Madam Hannah Otto, the CEO of Reviver Corp., is fond of 
# palindromes, or words that read the same forwards or backwards
# She thinks palindromic brand names are appealing to 
# millennials
# As part of the marketing campaign for the company's new juicer
# called the Rotator™, Hannah decided to push the marketing 
# team's palindrome-searching skills to a new level with a new 
# challenge
# In this challenge, Hannah provides a string s consisting of 
# lowercase English letters. Every day, for q days, she would 
# select two integers l and r, take the substring  s[l..r] (the
# substring of s from index l to index r), and ask the following
# question:
# Consider all the palindromes that can be constructed from some
# of the letters from s[l..r]. You can reorder the letters as 
# you need. Some of these palindromes have the maximum length 
# among all these palindromes. How many maximum-length 
# palindromes are there?
# Your job as the head of the marketing team is to answer all 
# the queries. Since the answers can be very large, you are only
# required to find the answer modulo 10^9 + 7.
# 1 <= |s| <= 10^5
# 1 <= q <= 10^5
# 1 <= l <= r <= |s|
################################################################
################################################################
################################################################
################################################################
# 1. 山下 先生 は 子供 でした か。
#    いいえ、山下 先生 は 子供 じゃなかったです。
# 2. 山下 先生 は 一 年生 でした か。
#    いいえ、山下 先生 一 年生 じゃなかったです。 
# 3. 山下 先生 は いい 学生 でした か。
#    はい、山下 先生 いい 学生 でした。 
# 4. 山下 先生 の 専攻 は 英語 でした か。
#    いいえ、山下 先生 の 専攻 は 英語 じゃなかったです。
# 5. 山下 先生 の 専攻 は 歴史 でした か。 
#    はい、山下 先生 の 専攻 は 歴史 でした。
################################################################
################################################################
MOD = 1000000007
ALPHABETSIZ = 26
################################################################
################################################################
################################################################
################################################################
module Combo
  N = 100000
  ##############################################################
  @fact = Array.new( N + 1 )
  @invs = Array.new( N + 1 )
  ##############################################################
  def self.modexp( x, y ) # x^y%MOD
    return 1 if y == 0
    z = modexp( x, y/2 )
    if y & 1 == 0
      return z * z % MOD
    end
    z * z * x % MOD
  end
  ##############################################################
  def self.initialize
    @fact[ 0 ] = 1
    for j in ( 1 .. N )
      @fact[ j ] = @fact[ j - 1 ] * j % MOD
    end
    @invs[ N ] = modexp( @fact[ N ], MOD - 2 )
    ( N - 1 ).downto( 0 ) do | j |
      @invs[ j ] = @invs[ j + 1 ] * ( j + 1 ) % MOD
    end
  end
  ##############################################################
  def self.C( n, k ) #                     Binomial Coefficients
    @fact[ n ] * @invs[ k ] * @invs[ n - k ] % MOD;
  end
  ##############################################################
  def self.M( ks ) #                    Multinomial Coefficients
    n = ks.sum
    result = 1
    ks.each do | k |
      result *= C( n, k )
      result %= MOD
      n -= k
    end
    result
  end
  ##############################################################
end
################################################################
################################################################
########   #####################################################
#######     ####################################################
######      ####################################################
#####       ####################################################
####       #####################################################
###       ########      #######      ###########################
##       ########        #####        ##########################
#        ########        #####        ######################### 
         ####                             ####################  
         ###                               ##################   
         ###                               #################     
         ####                             #################     
         ########        #####        #####################      
         ####                             #################     
 #       ###                               #################   #
##       ###                               #####################
##       ####     ##        ###           ######################
##       ########     #####     ################################
##       #######      #####      ###############################
##       ######       #####       ##############################
##       #####       #######       #############################
##       ####       #########       ############################
##       ####      ###########       ###########################
###     #####     #############      ###########################
##############   ###############     ###########################
#################################   ############################
################################################################
#################   ############################################
################     ###########################################
###############      ###########################################
##############       ###########################################
#############       ############################################
############       ########      #######      ##################
###########       ########        #####        #################
##########        ########        #####        ################# 
#########         ####                             #############
########          ###                               ############
class Buckets         
######            ####                             #############
  def initialize( s )                                           
    @buckets = cons( s )  
  end                     
  #########       ###                               ############
  #########       ####     ##        ###           #############
  #########       ########     #####     #######################
  #########       #######      #####      ######################
  def cosmos( m, n, value=0 )              
    Array.new( m ){ Array.new( n ){ value }}
  end                                            
  #########       ####      ###########       ##################
  ##########     #####     #############      ##################
  #####################   ###############     ##################
  ########################################   ###################
  def cons( s )
    n = s.length + 1
    buckets = cosmos( ALPHABETSIZ, n )
    s.each_byte.with_index do | ascii, j |
      buckets[ ascii - "a".ord ][ j + 1 ] = 1
    end 
    for bucket in buckets
      ( n - 1 ).times do | j |
        bucket[ j + 1 ] += bucket[ j ]
      end
    end
    buckets
  end
  ##############################################################
  ##############################################################
  ##############################################################
  ##############################################################
  def getcounts( l, r )
    counts = []
    @buckets.each do | bucket |
      count = bucket[ r ] - bucket[ l - 1 ]
      counts.push( count ) if count > 0
    end
    counts
  end
  ##############################################################
  ##############################################################
  ##############################################################
  ##############################################################
end
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
class Palindromes
  ##############################################################
  def initialize( s )
    @buckets = Buckets.new( s )
  end             
  def nfp( l, r )  
    center = 0
    flank = []
    @buckets.getcounts( l, r ).each do | n |
      center += n % 2
      flank.push( n/2 ) if ( n/2 ) > 0
    end
    if center == 0
      center = 1
    end
    center * Combo::M( flank ) % MOD
  end
  ##############################################################
end
################################################################
################################################################
################################################################
################################################################
def initialize_( s )
  $palin = Palindromes.new( s )
  Combo::initialize
end
################################################################
################################################################
################################################################
################################################################
def answerQuery( l, r )
  $palin.nfp( l, r )
end
################################################################
################################################################
################################################################
################################################################
s=gets.chomp####################################################
initialize_ s###################################################
q=gets.strip.to_i###############################################
q.times do |q_itr|##############################################
    first_multiple_input=gets.rstrip.split######################
    l=first_multiple_input[0].to_i##############################
    r=first_multiple_input[1].to_i##############################
    result=answerQuery l, r#####################################
    puts result#################################################
end#############################################################
################################################################
################################################################
################################################################
################################################################
# Hackos:                                                   1978
# Score:                                                      40
# Challenges:                                          119 / 563
# Rank:                                                    16119
# Points:                                                   3203
# 1.5.20: A reel of magnetic tape is played for a time t at a
# film speed v. The initial radius of the reel (with the film)
# is R, and the final radius (without the film) is r. What is
# the thickness of the film
#
# Let the width of film is h, There will be N layers of film, 
# with
#
#     Nh = R - r                                             (1)
#
# Let the radius of jth layer is rj, it will be played for time
#
#     tj = 2(pi)rj/v,
#
# playing the whole tape will take time
#
#     t = sum(j=1,N)(tj)
#
# The radius of the first layer is r + h|2, of the second
# r + h|2 + h, and so on. So the radius of the jth layer is
#
#     rj = r + h|2 + (j - 1)h = (j - 1/2)h + r,
#
# so we'll have:
#
#     tv|2(pi) = sum(rj) = sum[(j - 1/2)h + r ] =
#              = sum(jh + r - h/2 ) = hsum(j) + N(r - h/2),
#
# here we can use the formula:
#
#     sum(j=1,N)(j) = 1 + 2 + .. + N = N(N + 1)|2, so
#
#     tv|2(pi) = N(r - h/2 + h(N + 1)\2)
#              = N(r - h/2 + hN/2 + h\2) = N(r + hN\2),
#              here we use equation (1),
#              = N(r + (R - r)|2) = N(R + r)|2 = Nh(R + r)|2h
#              = (R - r)(R + r)|2h = (R² - r²)/2h, so
#
# h = pi(R² - r²)\vt                                           «
################################################################
################################################################
################################################################
################################################################

