############################################################
#####################      #################################
######                                    ########### zurück g
############################################################
############                        ################## retro i
############      ###      ###      ########################
############      ``````''''''      ################## dorso s
############      ###      ###      ########################
############                        ################ тиловий u
#####################      #################################
#########                              ############# arrière f
#####################      #################################
######                                    ##################
               ######`     #####       
            ######````      #####    ##'
         ########``          ##### #####'
      ###### ####`            ########'''
       ##    ####` ######`     #####''' 
             ########`````      #####'  
           ######`````           #####' 
############################################################
# 裏 back, reverse( うら )  
############################################################
# Minimum Loss
############################################################
# Lauren has a chart of distinct projected prices for a 
# house over the next several years. She must buy the house 
# in one year and sell it in another, and she must do so at 
# a loss. She wants to minimize her financial loss
############################################################
# www.hackerrank.com/challenges/minimum-loss/problem
############################################################
def minimumLoss( price )
    ##### create a hash map for price value -> index mapping
    h = Hash.new
    ################## loop over prices and set the hash map
    price.each_with_index do |value,index|
        h[ value ] = index
    end
    ############## sort the prices in reverse order in place
    price.sort! { |a,b| b <=> a }
    ############################## initialize min loss value
    min_loss = Float::INFINITY
    ################### loop over prices except the last one
    ( price.length - 1 ).times do | j |
        ########### get the values of two consequtive prices
        p, q = price[ j ], price[ j + 1 ]
        ######################## get the original positioins
        u, v = h[ p ], h[ q ]
        ############################## that's the trick here
        min_loss = [ min_loss, p - q ].min if v > u
    end
    ############################################## au revoir
    min_loss
end
############################################################
############################################################
############################################################
############################################################
############################################################
fptr = $stdout                        ######################
n = gets.strip.to_i                   ######################
price = gets.rstrip.split.map(&:to_i) ######################
result = minimumLoss price            ######################
fptr.write result                     ######################
fptr.write "\n"                       ######################
fptr.close()                          ######################
############################################################
############################################################
############################################################
############################################################
#                                                  Congrats!
#                              You have earned your 4th star
#                              You have earned 35.00 points!
#     You are now 364.92 points away from the gold level for 
#                                 your problem solving badge
# Points:                                       485.08 / 850
# Rank:                                               444204 
############################################################
############################################################
############################################################
############################################################
