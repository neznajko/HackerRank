################################################################
# www.hackerrank.com/challenges/kingdom-division/problem
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
MOD = 1000000007
################################################################
def kingdomDivision( n, roads ):
    return Kingdom( n, roads ).vrooom()
################################################################
################################################################
################################################################
from collections import deque
################################################################
################################################################
# This solution is definetly not medium, but I couldn't find a
# simple one. I had to rewrite the code cos Ruby was giving a 
# Runtime Error for test case 11 with 72473 vertices, but at the
# same time it was running on my computer vithout problems.
# Anyway I'm happy to get this done
################################################################
################################################################
################################################################
class Kingdom:
    # n - number of vertices
    # roads - n - 1, ( u, v ) pairs  
    def __init__( self, n, roads ):
        self.adj = Kingdom.cons_adj( n, roads )
        self.vzt = [ set() for _ in range( n + 1 )]
        self.deq = Kingdom.cons_deq( self.adj )
        self.cache = [ None ] * ( n + 1 )
       
    # tha'ts becoz ......
    def vrooom( self ):
        while True:
            v = self.pop() # I 4hink popping
            n0 = 2
            n1 = 2
            for u in self.vzt[ v ]:
                # dOthEMAth
                g = self.cache[ u ]
                n0 *= g[ 1 ] // 2
                n1 *= ( g[ 0 ] // 2 + g[ 1 ])

            self.cache[ v ] = [ n0, n1 - n0 ]
            # tscheck parent node
            if len( self.adj[ v ]) == 0: break # The G.O,A'T
            p = self.adj[ v ].pop() 
            self.adj[ p ].remove( v )
            self.vzt[ p ].add( v )
            # here <= is 4 the góäT( the root )
            if len( self.adj[ p ]) <= 1:
                self.push( p ) 
        # geraut
        return self.cache[ v ][ 1 ] % MOD

    # construct adjacency list from roads
    def cons_adj( n, roads ):
        adj = [ set() for _ in range( n + 1 )]
        for u, v in roads:
            adj[ u ].add( v )
            adj[ v ].add( u )
        return adj

    # Populate Mars!
    def push( self, v ):
        self.deq.append( v )

    # popping vs break dance
    def pop( self ):
        return self.deq.popleft()
        
    # fill the deq with all leaf nodes
    def cons_deq( adj ):
        deq = deque()
        for v, nbors in enumerate( adj[ 1: ], 1 ):
            # <= handles The Han Solo vertex scenario
            if len( nbors ) <= 1:
                deq.append( v )
        return deq

################################################################
################################################################
################################################################
################################################################
# 昼ご飯を食べませんか。
# Wollen wir Mittagessen?
################################################################
# いいですね。 
# Das klingt gut.
################################################################
# テニスをしませんか。 
# Möchtest du Tennis spielen?
################################################################
# うーん、ちょっと。
# Hm, ein bisschen...
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
if __name__ == '__main__': #####################################
    n = int(input().strip()) ###################################
    roads = [] #################################################
    for _ in range(n - 1): #####################################
        roads.append(list(map(int, input().rstrip().split()))) #
    result = kingdomDivision(n, roads) #########################
    print(result) ##############################################
################################################################
################################################################
################################################################
################################################################
################################################################
#   Congratulations You solved this challenge. Would you like to 
#                    challenge your friends? Share on f | C | in
# Points:                                           595.75 / 850
# Rank:                                                   353608
