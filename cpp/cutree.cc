////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# include                                             <iostream>
# include                                               <string>
# include                                               <vector>
# include                                            <algorithm>
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
string ltrim( const string&str){string s(str);s.erase(s.begin(),
find_if(s.begin(),s.end(),not1(ptr_fun<int,int>( isspace ) ) ));
return s;}//////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
string rtrim(const string &str){string s(str);s.erase(find_if(s.
rbegin(),s.rend(),not1(ptr_fun<int,int>(isspace))).base(),s.end(
));return s;}///////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
vector<string>split( const string & str ){ vector<string>tokens;
string::size_type start=0;string::size_type end=0;while((end=str
.find(" ",start)) !=string::npos ){ tokens.push_back(str.substr(
start,end-start));start=end+1;}tokens.push_back(str.substr(start
));return tokens;}//////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
template <typename T>
ostream& operator <<( ostream& _ , const vector <T> & vec ){
    _ << "[";
    if( vec.size() > 0 ){
        _ << " ";
        for( const auto& y: vec ){
            _ << y << " ";
        }
    }
    return _ << "]";
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Tree {
private:
    const vector <int> & value;
    vector <vector <int>> adj;
    vector <int> sum;
    vector <bool> vztd;
    int getsum( int u ){
        vztd[ u ] = true;
        for( int v: adj[ u ]){
            if( !vztd[ v ]){
                sum[ u ] += getsum( v );
            }
        }
        return sum[ u ];
    }
public:
    Tree( const vector <int>                             & value,
          const vector <vector <int>>                    & edges )
        : value( value ),
          adj( value.size()),
          sum( value ),
          vztd( value.size())
    {
        for( const auto& edge: edges ){
            int u = edge[ 0 ];
            int v = edge[ 1 ];
            adj[ u - 1 ].push_back( v - 1 );
            adj[ v - 1 ].push_back( u - 1 );
        }
    }
    int mindif() {
        int mindif = getsum( 0 );
        int n = sum.size();
        for( int j = 1; j < n; ++j ){
            mindif = min( mindif, abs( sum[ 0 ] - 2 * sum[ j ]));
        }
        return mindif;
    }
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int cutTheTree( const vector <int> &                       value,
                const vector <vector <int>> &              edges )
{
    return Tree( value, edges ).mindif();
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int main(){string n_temp;getline(cin,n_temp); int n=stoi( ltrim(
rtrim(n_temp)));string data_temp_temp;getline(cin,data_temp_temp
);vector<string>data_temp=split(rtrim( data_temp_temp)); vector<
int>data(n);for(int i=0;i<n;i++){int data_item=stoi(data_temp[i]
);data[i]=data_item;}vector<vector<int>>edges(n-1);for(int i=0;i
<n-1;i++){edges[i].resize(2);string edges_row_temp_temp;getline(
cin,edges_row_temp_temp); vector<string> edges_row_temp = split(
rtrim( edges_row_temp_temp )); for( int j = 0; j < 2; j++ ){ int 
edges_row_item = stoi ( edges_row_temp [ j ] ); edges[ i ][ j ]=
edges_row_item;}}int result=cutTheTree(data,edges);cout <<result
<<endl;}////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Hackos:                                                  1662
// Max Score:                                              50.00
// Points:                                        2168.21 / 2200
// Rank:                                                   50054
// One Advice:     If you are 50 plus YouTubeR don't try to look
//      cool cos you look even more stupid than you actually are
