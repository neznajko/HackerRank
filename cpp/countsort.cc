////////////////////////////////////////////////////////////////
// hackerrank.com/challenges/countingsort4/
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# include                                             <iostream>
# include                                               <string>
# include                                               <vector>
# include                                            <algorithm>
# include                                              <sstream>
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
string ltrim( const string&str){string s(str);s.erase(s.begin(),
find_if(s.begin(),s.end(),not1(ptr_fun<int,int>( isspace ) ) ));
return s;}//////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
string rtrim(const string &str){string s(str);s.erase(find_if(s.
rbegin(),s.rend(),not1(ptr_fun<int,int>(isspace))).base(),s.end(
));return s;}///////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
vector<string>split( const string & str ){ vector<string>tokens;
string::size_type start=0;string::size_type end=0;while((end=str
.find(" ",start)) !=string::npos ){ tokens.push_back(str.substr(
start,end-start));start=end+1;}tokens.push_back(str.substr(start
));return tokens;}//////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
template <typename T>
ostream& operator <<( ostream& _ , const vector <T> & vec ){
    _ << "[";
    if( vec.size() > 0 ){
        _ << " ";
        for( const auto& y: vec ){
            _ << y << " ";
        }
    }
    return _ << "]";
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
const int MAXKEY = 100;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// If key space is relatively small sorting can be done using
// hash tables for linear O( n ) time, that is if a given string
// has only a-z characters, we can sort it by counting each
// character:
// count[ a ] = 5
// count[ b ] = 7
// ...
// count[ z ] = 8, then the sorted string will be:
// aaaaa( 5 times )bbbbbbb( 7 times )...zzzzzzzz( 8 times )
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
void countSort( vector <vector <string>> a ){
    int n = a.size();
    int h = n / 2;
    vector <vector <string>> vec( MAXKEY );
    for( int j = 0; j < h; ++j ){
        int i = stoi( a[ j ].front());
        vec[ i ].push_back( "-" );
    }
    for( int j = h; j < n; ++j ){
        int i = stoi( a[ j ].front());
        string s = a[ j ].back();
        vec[ i ].push_back( s );
    }
    stringstream ss;
    for( const auto& bucket: vec ){
        if( !bucket.empty()){
            for( const auto& s: bucket ){
                ss << s << " ";
            }
        }
    }
    cout << ss.str();
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int main(){string n_temp;getline(cin,n_temp);int n = stoi(ltrim(
rtrim(n_temp)));vector<vector<string>>arr(n);for(int i=0;i<n;i++
) { arr[ i ].resize( 2 );string arr_row_temp_temp; getline (cin, 
arr_row_temp_temp ); vector< string >arr_row_temp = split(rtrim(
arr_row_temp_temp));for(int j = 0; j<2;j++){string arr_row_item=
arr_row_temp[ j ];arr[ i ][ j ]=arr_row_item; }}countSort(arr);}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Hackos:                                                  1689
// Max Score:                                              40.00
// Challenges:                                          82 / 563
// Points / Rank:                                2248.21 / 42983
