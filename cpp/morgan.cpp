////////////////////////////////////////////////////////////////
// www.hackerrank.com/challenges/morgan-and-a-string/problem
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# include                                             <iostream>
# include                                               <string>
# include                                               <vector>
# include                                            <algorithm>
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
string ltrim( const string&str){string s(str);s.erase(s.begin(),
find_if(s.begin(),s.end(),not1(ptr_fun<int,int>( isspace ) ) ));
return s;}//////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
string rtrim(const string &str){string s(str);s.erase(find_if(s.
rbegin(),s.rend(),not1(ptr_fun<int,int>(isspace))).base(),s.end(
));return s;}///////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
struct Char {
    char key;
    int value;
    Char( char key, int value = 1 )
    : key( key ),
      value( value )
    {}
};
////////////////////////////////////////////////////////////////
ostream& operator <<( ostream& _, const Char& ch ){
    return _ << ch.key << ch.value;
}
////////////////////////////////////////////////////////////////
class String {
private:
    vector <Char> stk;
    int stkptr = 0;
public:
    String( const string& s, char guard ){
        stk.emplace_back( s[ 0 ]);
        int n = s.length();
        for( int j = 1; j < n; ++j ){
            push( s[ j ]);
        }
        stk.emplace_back( guard, 0 );
    }
    void push( char c ){
        if( stk.back().key == c ){
            ++stk.back().value;
        } else {
            stk.emplace_back( c );
        }
    }
    char pop() { // stk[ stkptr ].value > 0
        char key = stk[ stkptr ].key;
        if( --stk[ stkptr ].value == 0 ){
            ++stkptr;
        }            
        return key;
    }
    bool operator <( const String& other ){
        int i = stkptr;
        int j = other.stkptr;
        while( true ){
            if( stk[ i ].key < other.stk[ j ].key ){
                return true;
            }
            if( stk[ i ].key > other.stk[ j ].key ){
                return false;
            }
            // stk[ i ].key == other.stk[ j ].key
            if( stk[ i ].value > other.stk[ j ].value ){
                return stk[ i ].key < other.stk[ j + 1 ].key;
            }
            if( stk[ i ].value < other.stk[ j ].value ){
                return stk[ i + 1 ].key < other.stk[ j ].key;
            }
            ++i;
            ++j;
        }
    }
    friend ostream& operator <<( ostream& _, const String& st ){
        for( Char ch: st.stk ){
            _ << ch << " ";
        }
        return _;
    }
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////// /////////
///////////////////////////////////////////////////// //////////
//////////////////////////////////////////////////// ///////////
/////////////////////////////////////////////////// ////////////
string morganAndString( string& a, string& b )   ///
{                                               ///
    String s( a, '[' );                        ///
    String t( b, ']' );                       ///
    int n = a.length() + b.length();         ///
    string r;                               ///
    for( int j = 0; j < n; ++j ){          ///
        if( s < t ){                      ///
            r.push_back( s.pop());       ///
        } else {                        ///
            r.push_back( t.pop());     ///
        }                             ///
    }                                ///
    return r;                       ///
}                                  ///
/////////////////////////////////// ////////////////////////////
////////////////////////////////// /////////////////////////////
///////////////////////////////// //////////////////////////////
//////////////////////////////// ///////////////////////////////
int main(){string t_temp;getline(cin,t_temp);int t= stoi( ltrim(
rtrim(t_temp))); for( int t_itr=0; t_itr<t; t_itr++ ){ string a;
getline( cin, a ); string b; getline( cin, b ) ; string result =
morganAndString(a,b);cout<<result<<"\n";}}//////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Hackos:                                                  1314
// Max Score:                                             100.00
// Points:                                        1718.21 / 2200
// Rank:                                                   71547
